@import './scss/variables/variables';
@import './scss/variables/mixings';
@import './scss/variables/variables-custom';
@import './scss/mixing/alert';
@import './scss/mixing/background-variant';
@import './scss/mixing/badge';
@import './scss/mixing/border-radius';
@import './scss/mixing/box-shadow';
@import './scss/mixing/breakpoint';
@import './scss/mixing/button';
@import './scss/mixing/caret';
@import './scss/mixing/clearfix';
@import './scss/mixing/depreceate';
@import './scss/mixing/float';
@import './scss/mixing/forms';
@import './scss/mixing/gradients';
@import './scss/mixing/grid-framework';
@import './scss/mixing/grid';
@import './scss/mixing/hover';
@import './scss/mixing/image';
@import './scss/mixing/list-group';
@import './scss/mixing/lists';
@import './scss/mixing/nav-divider';
@import './scss/mixing/pagination';
@import './scss/mixing/reset-text';
@import './scss/mixing/resize';
@import './scss/mixing/screen-reader';
@import './scss/mixing/size';
@import './scss/mixing/table-row';
@import './scss/mixing/text-emphasis';
@import './scss/mixing/text-hide';
@import './scss/mixing/text-truncate';
@import './scss/mixing/transition';
@import './scss/mixing/visibility';



.btn {
	text-transform: uppercase;
	letter-spacing: .05rem;
	cursor: pointer;
}

// icon button
.btn-ico {
  position: relative;
  box-sizing: content-box;
  width: calc(#{$input-line-height * 1em} + #{$input-padding-y * 2});
  height: calc(#{$input-line-height * 1em} + #{$input-padding-y * 2});
  padding: 0;

  &[class*="-sm"] {
  	width: calc(#{$input-line-height-sm * 1em} + #{$input-padding-y-sm * 2});
  	height: calc(#{$input-line-height-sm * 1em} + #{$input-padding-y-sm * 2});
  }

  &[class*="-lg"] {
  	width: calc(#{$input-line-height-lg * 1em} + #{$input-padding-y-lg * 2});
  	height: calc(#{$input-line-height-lg * 1em} + #{$input-padding-y-lg * 2});
  }

  i {
    @include translate(-50%,-50%);
    position: absolute;
    font-size: $font-size-lg;
    top: 50%;
    left: 50%;
  }
}



// btn link
.btn-link {
	font-size: $font-size-sm;
}


// btn action
.btn-action {
	@include transition;
	position: relative;
	overflow: hidden;

	&:hover {
		padding-right: calc(#{$btn-padding-x * 2});

		span {
			@include translate(0,0);
			opacity: 1;
		}
	}

	span {
		@include translate(-25%, 0);
		@include transition;
		position: absolute;
		top: -$border-width;
		right: -$border-width;
		bottom: -$border-width;
		width: calc(#{$input-line-height * 1em} + #{$input-padding-y * 2});
		text-align: center;
		opacity: 0;

		&::before {
			@include translate(-50%,-50%);
			position: absolute;
			top: 50%;
			left: 50%;
			font-size: inherit;
		}
	}

	&.btn-sm {
		&:hover { padding-right: calc(#{$btn-padding-x-sm * 2}); }
		span { width: calc(#{$input-line-height-sm * 1em} + #{$input-padding-y-sm * 2}); }
	}

	&.btn-lg {
		&:hover { padding-right: calc(#{$btn-padding-x-lg * 2}); }
		span { width: calc(#{$input-line-height-lg * 1em} + #{$input-padding-y-lg * 2}); }
	}

	&.btn-white:hover {
		background: $white;
		border-color: $white;
	}
}


.btn-rounded {
	border-radius: rem(50);
}



// button group toggle
.btn-group-toggle {

	> .btn {
		cursor: pointer;
	}
}


// outlined buttons group
.btn-group-outline {
	@include clearfix;
	margin: $border-width 0 0 $border-width;

	&[class*="-sm"] {
		.btn {
			height: calc(#{$input-line-height-sm * 1em} + #{$input-btn-padding-y-sm * 2} + #{$input-height-border});
			line-height: calc(#{$input-line-height-sm * 1em} + #{$input-btn-padding-y-sm * 2} + #{$input-height-border});
		}
	}

	&[class*="-lg"] {
		.btn {
			height: calc(#{$input-line-height-lg * 1em} + #{$input-btn-padding-y-lg * 2} + #{$input-height-border});
			line-height: calc(#{$input-line-height-lg * 1em} + #{$input-btn-padding-y-lg * 2} + #{$input-height-border});
		}
	}

	.btn {
		@include transition;
		position: relative;
		float: left;
		padding: 0 rem(20);
		height: calc(#{$input-line-height * 1em} + #{$input-padding-y * 2} + #{$input-height-border});
		margin-top: -$border-width;
		margin-left: -$border-width;
		font-size: $font-size-sm;
		line-height: calc(#{$input-line-height * 1em} + #{$input-padding-y * 2});
		border: $border-width solid $border-color;
		z-index: 5;

		&:hover {
			color: $black;
		}

		&.active {
			color: $black;
			border: $border-width solid $black;
			z-index: 10;
		}
	}
}

// square buttons group
.btn-group-square {
	@include clearfix;
	margin: $border-width 0 0 $border-width;

	&[class*="-sm"] {
		.btn {
			width: calc(#{$input-line-height-sm * 1em} + #{$input-btn-padding-y-sm * 2} + #{$input-height-border});
			height: calc(#{$input-line-height-sm * 1em} + #{$input-btn-padding-y-sm * 2} + #{$input-height-border});
			line-height: calc(#{$input-line-height-sm * 1em} + #{$input-btn-padding-y-sm * 2} + #{$input-height-border});
		}
	}

	&[class*="-lg"] {
		.btn {
			width: calc(#{$input-line-height-lg * 1em} + #{$input-btn-padding-y-lg * 2} + #{$input-height-border});
			height: calc(#{$input-line-height-lg * 1em} + #{$input-btn-padding-y-lg * 2} + #{$input-height-border});
			line-height: calc(#{$input-line-height-lg * 1em} + #{$input-btn-padding-y-lg * 2} + #{$input-height-border});
		}
	}

	.btn {
		@include transition;
		position: relative;
		float: left;
		padding: 0;
		width: calc(#{$input-line-height * 1em} + #{$input-padding-y * 2} + #{$input-height-border});
		height: calc(#{$input-line-height * 1em} + #{$input-padding-y * 2} + #{$input-height-border});
		margin-top: -$border-width;
		margin-left: -$border-width;
		font-size: $font-size-sm;
		line-height: calc(#{$input-line-height * 1em} + #{$input-padding-y * 2});
		border: $border-width solid $border-color;
		z-index: 5;

		&:hover {
			color: $black;
		}

		&.active {
			color: $black;
			border: $border-width solid $black;
			z-index: 10;
		}
	}
}

aside {
	.btn-group-square {
		.btn {
			width: 25%;
		}
	}
}



// square buttons group - colors
.btn-group-colors {
	> .btn {
		&::after {
			@include translate(-50%,-50%);
			content: "";
			position: absolute;
			top: 50%;
			left: 50%;
			display: block;
			width: rem(20);
			height: rem(20);
			background: currentColor;
			border-radius: 50%;
		}
	}
}

.btn-outline-secondary {
	color: $body-color;
}


//
// inverted
// 
.text-white {
	.btn-group-square {
		> .btn {
			border-color: rgba($white, .25);
			color: rgba($white, .5);

			&:hover {
				z-index: 5;
			}

			&.active {
				border-color: $white;
				color: $white;
			}
		}
	}

	.btn-white {
		color: $black;
	}

	.btn-group-outline {

		.btn {
			border: $border-width solid rgba($white, .25);

			&:hover {
				color: $white;
			}

			&.active {
				color: $white;
				border: $border-width solid $white;
				z-index: 10;
			}
		}
	}
}


// colors
@each $color, $value in $colors {
  .btn-#{$color} {
    @include button-variant($value, $value);
  }
}

@each $color, $value in $colors {
  .btn-outline-#{$color} {
    @include button-outline-variant($value);
  }
}

img {
  max-width: 100%;
}

// image
.image {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-size: cover;
    background-position: center;

    &::after {
        @include transition;
        opacity: 0;
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        content: "";
        background: rgba($black, .3);
    }

    &[class*="-overlay"] {
        &::after { opacity: 1; }
    }

    &[class*="-scroll"] {
        height: 125%;
        top: -25%;
    }

    &[class*="-fade"] {
        &:hover::after {
            opacity: 1;
        }
    }

    &[class*="-scale"] {
        @include transition;
        @include scale(1.1);

            &:hover { 
            @include scale(1);
        }
    }
}

///////////////////////
%equal {
    position: relative;
    display: block;
    overflow: hidden;
  
    &::before {
      display: block;
      content: "";
      width: 100%;
      padding-top: 100%;
    }
  
  
    @each $breakpoint in map-keys($grid-breakpoints) {
      @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
  
        @each $size, $length in $sizes {
          &.equal#{$infix}-#{$size} {
            &::before {
              padding-top: $length;
            }
          }
        }
  
      }
    }
  
  }
  
  .equal {
    @extend %equal;
  
    &.zoom {
      .zoom-img {
        @include translate(0,-50%);
        position: absolute;
        top: 50%;
      }
    }
  }
  
  
  
  // flex width
  @each $size, $length in $sizes {
    .fw-#{$size} {
      flex: 0 0 $length!important;
      width: $length!important;
    }
  }
  
  
  // vertical height
  $height-list: ( 10, 20, 25, 30, 40, 50, 60, 70, 75, 80, 90, 100);
  
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
  
      @each $value in $height-list {
        .vh#{$infix}-#{$value} {
          height: #{$value}vh;
          min-height: #{$value}vh;
        }
      }
  
    }
  }
  
  @include media-breakpoint-down(md) {
    &[class*="vh-"] {
      height: auto!important;
    }
  } 